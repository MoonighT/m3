// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m3db/m3/src/dbnode/persist/types.go

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package persist is a generated GoMock package.
package persist

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/pborman/uuid"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// StartFlushPersist mocks base method
func (m *MockManager) StartFlushPersist() (DataFlush, error) {
	ret := m.ctrl.Call(m, "StartFlushPersist")
	ret0, _ := ret[0].(DataFlush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFlushPersist indicates an expected call of StartFlushPersist
func (mr *MockManagerMockRecorder) StartFlushPersist() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFlushPersist", reflect.TypeOf((*MockManager)(nil).StartFlushPersist))
}

// StartSnapshotPersist mocks base method
func (m *MockManager) StartSnapshotPersist() (DataFlush, error) {
	ret := m.ctrl.Call(m, "StartSnapshotPersist")
	ret0, _ := ret[0].(DataFlush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSnapshotPersist indicates an expected call of StartSnapshotPersist
func (mr *MockManagerMockRecorder) StartSnapshotPersist() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSnapshotPersist", reflect.TypeOf((*MockManager)(nil).StartSnapshotPersist))
}

// StartIndexPersist mocks base method
func (m *MockManager) StartIndexPersist() (IndexFlush, error) {
	ret := m.ctrl.Call(m, "StartIndexPersist")
	ret0, _ := ret[0].(IndexFlush)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIndexPersist indicates an expected call of StartIndexPersist
func (mr *MockManagerMockRecorder) StartIndexPersist() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIndexPersist", reflect.TypeOf((*MockManager)(nil).StartIndexPersist))
}

// MockDataFlush is a mock of DataFlush interface
type MockDataFlush struct {
	ctrl     *gomock.Controller
	recorder *MockDataFlushMockRecorder
}

// MockDataFlushMockRecorder is the mock recorder for MockDataFlush
type MockDataFlushMockRecorder struct {
	mock *MockDataFlush
}

// NewMockDataFlush creates a new mock instance
func NewMockDataFlush(ctrl *gomock.Controller) *MockDataFlush {
	mock := &MockDataFlush{ctrl: ctrl}
	mock.recorder = &MockDataFlushMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataFlush) EXPECT() *MockDataFlushMockRecorder {
	return m.recorder
}

// PrepareData mocks base method
func (m *MockDataFlush) PrepareData(opts DataPrepareOptions) (PreparedDataPersist, error) {
	ret := m.ctrl.Call(m, "PrepareData", opts)
	ret0, _ := ret[0].(PreparedDataPersist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareData indicates an expected call of PrepareData
func (mr *MockDataFlushMockRecorder) PrepareData(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareData", reflect.TypeOf((*MockDataFlush)(nil).PrepareData), opts)
}

// DoneFlush mocks base method
func (m *MockDataFlush) DoneFlush() error {
	ret := m.ctrl.Call(m, "DoneFlush")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoneFlush indicates an expected call of DoneFlush
func (mr *MockDataFlushMockRecorder) DoneFlush() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoneFlush", reflect.TypeOf((*MockDataFlush)(nil).DoneFlush))
}

// DoneSnapshot mocks base method
func (m *MockDataFlush) DoneSnapshot(snapshotUUID uuid.UUID, commitLogIdentifier []byte) error {
	ret := m.ctrl.Call(m, "DoneSnapshot", snapshotUUID, commitLogIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoneSnapshot indicates an expected call of DoneSnapshot
func (mr *MockDataFlushMockRecorder) DoneSnapshot(snapshotUUID, commitLogIdentifier interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoneSnapshot", reflect.TypeOf((*MockDataFlush)(nil).DoneSnapshot), snapshotUUID, commitLogIdentifier)
}

// MockIndexFlush is a mock of IndexFlush interface
type MockIndexFlush struct {
	ctrl     *gomock.Controller
	recorder *MockIndexFlushMockRecorder
}

// MockIndexFlushMockRecorder is the mock recorder for MockIndexFlush
type MockIndexFlushMockRecorder struct {
	mock *MockIndexFlush
}

// NewMockIndexFlush creates a new mock instance
func NewMockIndexFlush(ctrl *gomock.Controller) *MockIndexFlush {
	mock := &MockIndexFlush{ctrl: ctrl}
	mock.recorder = &MockIndexFlushMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexFlush) EXPECT() *MockIndexFlushMockRecorder {
	return m.recorder
}

// PrepareIndex mocks base method
func (m *MockIndexFlush) PrepareIndex(opts IndexPrepareOptions) (PreparedIndexPersist, error) {
	ret := m.ctrl.Call(m, "PrepareIndex", opts)
	ret0, _ := ret[0].(PreparedIndexPersist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareIndex indicates an expected call of PrepareIndex
func (mr *MockIndexFlushMockRecorder) PrepareIndex(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareIndex", reflect.TypeOf((*MockIndexFlush)(nil).PrepareIndex), opts)
}

// DoneIndex mocks base method
func (m *MockIndexFlush) DoneIndex() error {
	ret := m.ctrl.Call(m, "DoneIndex")
	ret0, _ := ret[0].(error)
	return ret0
}

// DoneIndex indicates an expected call of DoneIndex
func (mr *MockIndexFlushMockRecorder) DoneIndex() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoneIndex", reflect.TypeOf((*MockIndexFlush)(nil).DoneIndex))
}
